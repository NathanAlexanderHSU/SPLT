####Cleaned_Code
options(java.parameters = "-Xmx2048m")


require(spThin)
require(spatstat)
require(rgdal)
require(raster)
require(terra)
require(maptools)
require(rgeos)
require(dismo)
require(rJava)
require(sp)
require(PresenceAbsence)
library(exifr)
library(dplyr)
library(leaflet)
require(devtools)
require(prism)
require(stringi)
require(sf)
require(usdm)

##### Read in the study rea ###

SE_CO<-readOGR(dsn='F:\\SPLT_community_SDM\\Boundaries',layer='SE_CO')
require(sf)
SE_CO<-vect("D:/SPLT_community_SDM/Boundaries/SE_CO.shp")
plot(SE_CO)

### read in point files and update projections ###

##Need to redownload occurrences to be 1950s to now given data limitations.

all_files<-list.files("F:\\SPLT_community_SDM\\Occurrences",pattern=".txt",full.names=TRUE)
all_files
badger<-read.csv(all_files[1],sep="\t")
badger_1<-read.csv(choose.files(),sep="\t")

dim(badger)
dim(badger_1)

beaver<-read.csv(all_files[2],sep="\t")
dim(beaver)
ferret<-read.csv(all_files[3],sep="\t")
dim(ferret)
bison<-read.csv(all_files[4],sep="\t")
dim(bison)
bobcat<-read.csv(all_files[5],sep="\t")
dim(bobcat)
jackrabbit<-read.csv(all_files[6],sep="\t")
dim(jackrabbit)
prairiedog<-read.csv(all_files[7],sep="\t")
prairiedog_1<-read.csv(choose.files(),sep="\t")
dim(prairiedog)
dim(prairiedog_1)
cottontail<-read.csv(all_files[8],sep="\t")
dim(cottontail)
krat<-read.csv(all_files[9],sep="\t")
dim(krat)
muledeer<-read.csv(all_files[10],sep="\t")
dim(muledeer)
gopher<-read.csv(all_files[11],sep="\t")
dim(gopher)
porcupine<-read.csv(all_files[12],sep="\t")
dim(porcupine)
pronghorn<-read.csv(all_files[13],sep="\t")
dim(pronghorn)
skunk<-read.csv(all_files[14],sep="\t")
dim(skunk)
fox<-read.csv(all_files[15],sep="\t")
dim(fox)
species<-list(badger_1,beaver,ferret,bison,bobcat,jackrabbit,prairiedog_1,cottontail,krat,muledeer,
	gopher,porcupine,pronghorn,skunk,fox)
head(species[[1]])
length(species)
plot(SE_CO)

for(i in 1:length(species)){
points(cbind(species[[i]][,23],species[[i]][,22]),col=i)
}


### get predictors and crop to study site###


##Elevation and associated predictors##
require(dismo)
elev <-getData('alt',download=TRUE,country='USA',mask=TRUE)
elev.48<-elev[[1]]
cr.elev<-crop(elev.48,SE_CO)
cr.elev<-mask(cr.elev,SE_CO)
plot(cr.elev)


require(terra)
slope<-terrain(cr.elev,v='slope',unit='degrees',neighbors=8)
ruggedness<-terrain(cr.elev,v='TRI',unit='degrees',neighbors=8)
names(cr.elev)<-"Elevation"
names(slope)<-"Slope"
names(ruggedness)<-"Ruggedness"

##Precipitation and Seasonality##

install.packages("prism")
require(prism)


#annual precipitation
#PRISM data downloaded 7/13/2024
#ann_precip<-get_prism_annual(type="ppt",years=2000:2023)

#average monthly max temperature
#temp<-get_prism_annual(type="tmax",years=2000:2023)
prism_set_dl_dir("F:\\SPLT_community_SDM\\PRISM")
list_prism<-prism_archive_ls()

#stack the precip and the temp prism data
prism_2000_2023<-pd_stack(list_prism)

prism_84<-projectRaster(prism_2000_2023,cr.elev)

#need to reproject our study area as well
crs(SE_CO)
crs(elev.48)
SE_CO_84<-spTransform(SE_CO,crs(cr.elev))
crs(SE_CO_84)

cr.clim<-crop(prism_84, SE_CO_84)
cr.clim<-mask(cr.clim, SE_CO_84)

names(cr.clim)

sd_precip_00_14<-calc(cr.clim[[1:15]],sd)
sd_precip_15_23<-calc(cr.clim[[16:24]],sd)
names(sd_precip_00_14)<-"Precip_SD_00_14"
names(sd_precip_15_23)<-"Precip_SD_15_23"

mean_precip_00_14<-calc(cr.clim[[1:15]],mean)
mean_precip_15_23<-calc(cr.clim[[16:24]],mean)
names(mean_precip_00_14)<-"Precip_Mean_00_14"
names(mean_precip_15_23)<-"Precip_Mean_15_23"

sd_temp_00_14<-calc(cr.clim[[25:39]],sd)
sd_temp_15_23<-calc(cr.clim[[40:48]],sd)
names(sd_temp_00_14)<-"MaxTemp_SD_00_14"
names(sd_temp_15_23)<-"MaxTemp_SD_15_23"

mean_temp_00_14<-calc(cr.clim[[25:39]],mean)
mean_temp_15_23<-calc(cr.clim[[40:48]],mean)
names(mean_temp_00_14)<-"MaxTemp_mean_00_14"
names(mean_temp_15_23)<-"MaxTemp_mean_15_23"

##read in soil data and create a sand percent layer##

soil_us<-readOGR("F:/SPLT_community_SDM/Soil",layer="soil_joined")

soil_cr<-crop(soil_us,SE_CO_84)
soil_rast_sand<-rasterize(soil_cr,cr.elev,'sandtotal1')
soil_rast_sand<-mask(soil_rast_sand,SE_CO_84)
names(soil_rast_sand)<-"Soil_Sand_Percent"
plot(soil_rast_sand)

##landcover
#using percent perrenial, percent annual, and percent shrub 
#from MRLC RCMAP. We use the years 1997-2008 for the 2000-2015 values
#and the 2009-2023 for the 2015-2024 values.


########################
#because these files are in Albers, we need to do projections and cropping. We have done this
#and now have cropped means and st.devs that we can read in. These are still in Albers currently, but need
#need minimum effort to conver. Scroll until another row of ###########

require(terra)
#Annual herbaceous
list_annual_97_08<-list.files("D:\\SPLT_community_SDM\\Veg_1997_2008\\Annual_Herbaceous_1997_2008\\",
	 pattern='.tif',full.names=TRUE)
list_annual_09_23<-list.files("D:\\SPLT_community_SDM\\Veg_2009_2023\\Annual_Herbaceous_2009_2023\\",
	 pattern='.tif',full.names=TRUE)

annual_rast_97_23<-rast(c(list_annual_97_08,list_annual_09_23))
annual_rast_00_14<- rast(c(list_annual_97_08[4:12],list_annual_09_23[1:6]))
annual_rast_15_23<- rast(list_annual_09_23[7:15])


#Perennial herbacious
list_perennial_97_08<-list.files("D:\\SPLT_community_SDM\\Veg_1997_2008\\Perennial_Herbaceous_1997_2008\\",
	 pattern='.tif',full.names=TRUE)
list_perennial_09_23<-list.files("D:\\SPLT_community_SDM\\Veg_2009_2023\\Perennial_Herbaceous_2009_2023\\",
	 pattern='.tif',full.names=TRUE)

perennial_rast_97_23<-rast(c(list_perennial_97_08,list_perennial_09_23))
perennial_rast_00_14<- rast(c(list_perennial_97_08[4:12],list_perennial_09_23[1:6]))
perennial_rast_15_23<- rast(list_perennial_09_23[7:15])


#Shrub
list_shrub_97_08<-list.files("D:\\SPLT_community_SDM\\Veg_1997_2008\\Shrub_1997_2008\\",
	 pattern='.tif',full.names=TRUE)
list_shrub_09_23<-list.files("D:\\SPLT_community_SDM\\Veg_2009_2023\\Shrub_2009_2023\\",
	 pattern='.tif',full.names=TRUE)
shrub_rast_97_23<-rast(c(list_shrub_97_08,list_shrub_09_23))
shrub_rast_00_14<- rast(c(list_shrub_97_08[4:12],list_shrub_09_23[1:6]))
shrub_rast_15_23<- rast(list_shrub_09_23[7:15])

#because these shapefiles are so large, we will project our study area into their
#coordinate system and then back-convert after processing

#convert all of the vegetation rasters into WGS84

rast_84<-rast(choose.files())
rast_84

annual_97_23_wgs84<-project(annual_rast_97_23,crs(rast_84))
perennial_97_23_wgs84<-project(perennial__rast_97_23,crs(rast_84))
shrub_97_23_wgs84<-project(perennial_rast_97_23,crs(rast_84))

veg_00_14_mean_84<-projectRaster(stack(veg_00_14_mean),cr.elev)
veg_00_14_sd_84<-projectRaster(stack(veg_00_14_sd),cr.elev)
veg_15_23_mean_84<-projectRaster(stack(veg_15_23_mean),cr.elev)
veg_15_23_sd_84<-projectRaster(stack(veg_15_23_sd),cr.elev)

annual_00_14_cr_re<-classify(annual_00_14_cr,cbind(NA,0))
annual_15_23_cr_re<-classify(annual_15_23_cr,cbind(NA,0))

perennial_00_14_cr_re<-classify(perennial_00_14_cr,cbind(NA,0))
perennial_15_23_cr_re<-classify(perennial_15_23_cr,cbind(NA,0))

shrub_00_14_cr_re<-classify(shrub_00_14_cr,cbind(NA,0))
shrub_15_23_cr_re<-classify(shrub_15_23_cr,cbind(NA,0))

plot(shrub_00_14_cr_re)

annual_00_14_mean<-terra::mean(annual_00_14_cr_re)
annual_00_14_sd<-terra::stdev(annual_00_14_cr_re)

annual_15_23_mean<-terra::mean(annual_15_23_cr_re)
annual_15_23_sd<-terra::stdev(annual_15_23_cr_re)

perennial_00_14_mean<-terra::mean(perennial_00_14_cr_re)
perennial_00_14_sd<-terra::stdev(perennial_00_14_cr_re)

perennial_15_23_mean<-terra::mean(perennial_15_23_cr_re)
perennial_15_23_sd<-terra::stdev(perennial_15_23_cr_re)

SE_CO<-vect("D:\\SPLT_community_SDM\\Boundaries\\SE_CO.shp")
SE_CO_albers<-project(SE_CO,annual_rast_00_14)
SE_CO_albers

annual_00_14_cr<-crop(annual_rast_00_14,SE_CO_albers)
terra::writeRaster(annual_00_14_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\annual_00_14_cr.tif",overwrite=TRUE)

annual_15_23_cr<-crop(annual_rast_15_23,SE_CO_albers)
terra::writeRaster(annual_15_23_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\annual_15_23_cr.tif",overwrite=TRUE)

perennial_00_14_cr<-crop(perennial_rast_00_14,SE_CO_albers)
terra::writeRaster(perennial_00_14_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\perrenial_00_14_cr.tif",overwrite=TRUE)

perennial_15_23_cr<-crop(perennial_rast_15_23,SE_CO_albers)
terra::writeRaster(perennial_15_23_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\perennial_15_23_cr.tif",overwrite=TRUE)

shrub_00_14_cr<-crop(shrub_rast_00_14,SE_CO_albers)
terra::writeRaster(shrub_00_14_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\shrub_00_14_cr.tif",overwrite=TRUE)

shrub_15_23_cr<-crop(shrub_rast_15_23,SE_CO_albers)
terra::writeRaster(shrub_15_23_cr,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\shrub_15_23_cr.tif",overwrite=TRUE)

##Now calculate mean and SD of the vegetation layers

#areas within the extent that are "no data" are farmlands. We will reclassify these values to 0 for 
#0% annual herbaceous, 0% perennial herbaceous, and 0% shrub.

annual_00_14_cr_re<-classify(annual_00_14_cr,cbind(NA,0))
annual_15_23_cr_re<-classify(annual_15_23_cr,cbind(NA,0))

perennial_00_14_cr_re<-classify(perennial_00_14_cr,cbind(NA,0))
perennial_15_23_cr_re<-classify(perennial_15_23_cr,cbind(NA,0))

shrub_00_14_cr_re<-classify(shrub_00_14_cr,cbind(NA,0))
shrub_15_23_cr_re<-classify(shrub_15_23_cr,cbind(NA,0))

plot(shrub_00_14_cr_re)

annual_00_14_mean<-terra::mean(annual_00_14_cr_re)
annual_00_14_sd<-terra::stdev(annual_00_14_cr_re)

annual_15_23_mean<-terra::mean(annual_15_23_cr_re)
annual_15_23_sd<-terra::stdev(annual_15_23_cr_re)

perennial_00_14_mean<-terra::mean(perennial_00_14_cr_re)
perennial_00_14_sd<-terra::stdev(perennial_00_14_cr_re)

perennial_15_23_mean<-terra::mean(perennial_15_23_cr_re)
perennial_15_23_sd<-terra::stdev(perennial_15_23_cr_re)

shrub_00_14_mean<-terra::mean(shrub_00_14_cr_re)
shrub_00_14_sd<-terra::stdev(shrub_00_14_cr_re)

shrub_15_23_mean<-terra::mean(shrub_15_23_cr_re)
shrub_15_23_sd<-terra::stdev(shrub_15_23_cr_re)

veg_00_14_mean<-c(annual_00_14_mean,perennial_00_14_mean,shrub_00_14_mean)
veg_00_14_sd<-c(annual_00_14_sd,perennial_00_14_sd,shrub_00_14_sd)

veg_15_23_mean<-c(annual_15_23_mean,perennial_15_23_mean,shrub_15_23_mean)
veg_15_23_sd<-c(annual_15_23_sd,perennial_15_23_sd,shrub_15_23_sd)

names(veg_00_14_mean)<-c("MeanAnnual_00_14","MeanPerennial_00_14","MeanShrub_00_14")
names(veg_00_14_sd)<-c("SDAnnual_00_14","SDPerennial_00_14","SDShrub_00_14")

names(veg_15_23_mean)<-c("MeanAnnual_15_23","MeanPerennial_15_23","MeanShrub_15_23")
names(veg_15_23_sd)<-c("SDAnnual_15_23","SDPerennial_15_23","SDShrub_15_23")

writeRaster(veg_00_14_mean,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_00_14_mean_Albers.tif",overwrite=TRUE)
writeRaster(veg_00_14_sd,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_00_14_sd_Albers.tif",overwrite=TRUE)

writeRaster(veg_15_23_mean,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_15_23_mean_Albers.tif",overwrite=TRUE)
writeRaster(veg_15_23_sd,"D:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_15_23_sd_Albers.tif",overwrite=TRUE)


###################################
##read in the files we created and reproject these into wgs 84 for integration with the other datasets

veg_00_14_mean<-rast("F:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_00_14_mean_Albers.tif")
veg_00_14_sd<-rast("F:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_00_14_sd_Albers.tif")
plot(veg_00_14_mean)
veg_15_23_mean<-rast("F:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_15_23_mean_Albers.tif")
veg_15_23_sd<-rast("F:\\SPLT_community_SDM\\Processed rasters\\Veg_84\\veg_15_23_sd_Albers.tif")

veg_00_14_mean_84<-projectRaster(stack(veg_00_14_mean),cr.elev)
veg_00_14_sd_84<-projectRaster(stack(veg_00_14_sd),cr.elev)
veg_15_23_mean_84<-projectRaster(stack(veg_15_23_mean),cr.elev)
veg_15_23_sd_84<-projectRaster(stack(veg_15_23_sd),cr.elev)

veg_m_00_14_cr<-mask(veg_00_14_mean_84,SE_CO_84)
veg_s_00_14_cr<-mask(veg_00_14_sd_84,SE_CO_84)
veg_m_15_23_cr<-mask(veg_15_23_mean_84,SE_CO_84)
veg_s_15_23_cr<-mask(veg_15_23_sd_84,SE_CO_84)

plot(stack(veg_m_00_14_cr,veg_s_00_14_cr,veg_m_15_23_cr,veg_s_15_23_cr))

require(usdm)
usdm::vif(c(rast(veg_m_00_14_cr),rast(veg_s_00_14_cr)))
usdm::vif(c(rast(veg_m_15_23_cr),rast(veg_s_15_23_cr)))

#no VIFs over 5 for the vegetation so can proceed
### compare predictors ###


## next, make sure all parameters are the same resolution and extent.

#2000-2014 predictors:
preds_elev<-stack(cr.elev, slope, ruggedness)
preds_soil<-soil_rast_sand
preds_clim_00<-stack(mean_precip_00_14,sd_precip_00_14,mean_temp_00_14,sd_temp_00_14)
preds_veg_00<-stack(veg_00_14_mean_84,veg_00_14_sd_84)

preds_00<-stack(preds_elev,preds_soil,preds_clim_00,preds_veg_00)
plot(preds_00)
terra::writeRaster(rast(preds_00),"F:\\SPLT_community_SDM\\Processed rasters\\Final Layers\\preds_00_14_2.tif",overwrite=TRUE)

#2015-2024
#preds_elev are the same
#sand percent is the same
preds_clim_15<-stack(mean_precip_15_23,sd_precip_15_23,mean_temp_15_23,sd_temp_15_23)
preds_veg_15<-stack(veg_15_23_mean_84,veg_15_23_sd_84)
preds_15<-stack(preds_elev,preds_soil,preds_clim_15,preds_veg_15)
terra::writeRaster(rast(preds_15),"F:\\SPLT_community_SDM\\Processed rasters\\Final Layers\\preds_15_23.tif",overwrite=TRUE)
test<-rast("F:\\SPLT_community_SDM\\Processed rasters\\Final Layers\\preds_15_23.tif")
plot(preds_15)


usdm::vif(rast(preds_00))

#preds_00 has high VIG with elevation, slope, and ruggedness.
#because slope impacts burrowing, we will remove ruggedness here.

preds_00<-preds_00[[-3]]
usdm::vif(rast(preds_00))

#elevation is still 6.95, but we will retain it for now
	#see 15-23 analysis for why we now remove elevation

preds_00<-preds_00[[-1]]
usdm::vif(rast(preds_00))

#mean annual has highest vif at 4.54

#now test for collinearity

pairs(preds_00)
preds_00[[8]]
preds_00[[11]]
preds_00[[7]]

#mean annual herbaceous and sd annual herbaceous are correlated at 0.81
#max temp SD and elevation are correlated at 0.79
#mean annual precip and elevation are correlated at 0.76
	#we removed elevation, so no longer an issue

usdm::vif(rast(preds_15))

#preds_15 has high VIF with elevation, slope, and ruggedness
#we will omit ruggedness again

preds_15<-preds_15[[-3]]
usdm::vif(rast(preds_15))

#elevation still has a vif of 15. Given that it has a high VIF here
#and correlates with two predictors in 00-14, we will remove elevation
#from both sets of preds

preds_15<-preds_15[[-1]]
usdm::vif(rast(preds_15))

#no variables have a VIF >3
pairs(preds_15)

#no pairs had a correlation >0.7


##################################
##################################
#returning to the occurrence data, we need to 
#remove points that have a high uncertainty
#and thin to 1 km

colnames(species[[1]])
species_updated<-list()
length(species)
class(species)

species<-list(badger,beaver,ferret,bison,bobcat,jackrabbit,prairiedog_1,cottontail,krat,muledeer,
	gopher,porcupine,pronghorn,skunk,fox)

#first set all NA uncertainty to 0
species_updated<-list()


##need to update this where the entire row with NA uncertainty is being replaced by zeros

for(i in 1:length(species)){
species[[i]][is.na(species[[i]]$coordinateUncertaintyInMeters),]<-0
print(paste(unique(species[[i]]$species),dim(species[[i]]),range(species[[i]]$coordinateUncertaintyInMeters)))
}


species_updated<-list()
for(i in 1:length(species)){
species_updated[[i]]<-species[[i]][which(species[[i]]$coordinateUncertaintyInMeters<1000),]
}



length(species_updated)
colnames(species_updated[[1]])

for(i in 1:length(species_updated)){
	print(unique(species_updated[[i]]$species))	
	print(dim(species_updated[[i]]))
}

##we still have a decent number of occurrences for everything except ferrets after removing uncertain detections

##now we seperate occurrences into 2000-2014 and 2015-2024

species_updated<-species
species_00<-list()
species_15<-list()

colnames(species_updated[[1]])
for(i in 1:length(species_updated)){
species_00[[i]]<-species_updated[[i]][which(species_updated[[i]]$year<2015),]
}
length(species_00)

for(i in 1:length(species_00)){
	print(unique(species_00[[i]]$species))	
	print(nrow(species_00[[i]]))
}

for(i in 1:length(species_updated)){
species_15[[i]]<-species_updated[[i]][which(species_updated[[i]]$year>=2015),]
}
length(species_15)

for(i in 1:length(species_15)){
	print(unique(species_15[[i]]$species))	
	print(nrow(species_15[[i]]))
}

##filter points to within the shapefile

species_00_df<-data.frame(species_00[[1]])
for(i in 2:length(species_00)){
	species_00_df<-rbind(species_00_df,data.frame(species_00[[i]]))
}
unique(species_00_df$species)

species_15_df<-data.frame(species_15[[1]])
for(i in 2:length(species_15)){
	species_15_df<-rbind(species_15_df,data.frame(species_15[[i]]))
}
unique(species_15_df$species)

species_00_sf <- st_as_sf( x = species_00_df,coords = c("decimalLongitude", "decimalLatitude"),crs = "+proj=longlat +datum=WGS84" )
species_15_sf <- st_as_sf( x = species_15_df,coords = c("decimalLongitude", "decimalLatitude"),crs = "+proj=longlat +datum=WGS84" )

class(species_00_sf)
class(SE_CO_84)

crs(SE_CO_84)<-crs(species_00_sf)
test_00<-st_crop(species_00_sf,SE_CO_84)
test_15<-st_crop(species_15_sf,SE_CO_84)
plot(SE_CO_84)
points(test_00,col="black")
points(test_15,col="red")

table(test_00$species)
table(test_15$species)
table(species$species)

### we have limited occurrences pre 2015, so may need to expand the historic dataset further.

#now we need to crop all the occurrences to within the study area
#break back into species specific objects to convert and thin.

#################################
#################################
### set up maxent models to run ###

##run a preliminary maxent model for each species in 2015
colnames(species_15[[1]])
i<-1
plot(preds_15)

species_15_crop<-data.frame(test_15)
colnames(species_15_cr)
species_15_cr<-list()
colnames(species_15_crop)
for(i in 1:length(species_15)){
	m_file<-cbind(species_15[[i]][,1],species_15[[i]][,22:23])
	colnames(m_file)<-c("gbifID","decimalLatitude","decimalLongitude")
	sp_m<-merge(species_15_crop,m_file,by="gbifID")
	species_15_cr[[i]]<-sp_m
	print(cbind(nrow(species_cr[[i]]),nrow(species_15[[i]])))
}

length(species_15_cr[[1]])

#remove ferrets (species_15_cr[[3]])
species_15_red<-list(species_15_cr[[1]],species_15_cr[[2]],species_15_cr[[4]],
	species_15_cr[[5]],species_15_cr[[6]],species_15_cr[[7]],species_15_cr[[8]],
	species_15_cr[[9]],species_15_cr[[10]],species_15_cr[[11]],
	species_15_cr[[12]],species_15_cr[[13]],species_15_cr[[15]])

#remove beavers
species_15_red<-list(species_15_cr[[1]],species_15_cr[[4]],
	species_15_cr[[5]],species_15_cr[[6]],species_15_cr[[7]],species_15_cr[[8]],
	species_15_cr[[9]],species_15_cr[[10]],species_15_cr[[11]],
	species_15_cr[[12]],species_15_cr[[13]],species_15_cr[[15]])


unique(species_15_red[[9]]$species)
unique(species_15[[11]]$species)
#remove gophers
species_15_red<-list(species_15_cr[[1]],species_15_cr[[4]],
	species_15_cr[[6]],species_15_cr[[7]],species_15_cr[[8]],
	species_15_cr[[9]],species_15_cr[[10]],
	species_15_cr[[12]],species_15_cr[[13]],species_15_cr[[15]])

unique(species_15_red[[5]]$species)
unique(species_15[[8]]$species)

#remove cottontails
species_15_red<-list(species_15_cr[[1]],species_15_cr[[4]],
	species_15_cr[[6]],species_15_cr[[7]],
	species_15_cr[[9]],species_15_cr[[10]],species_15_cr[[11]],
	species_15_cr[[12]],species_15_cr[[13]],species_15_cr[[15]])

unique(species_15_red[[7]]$species)
unique(species_15[[11]]$species)

unique(species_15_red[[8]]$species)
unique(species_15[[12]]$species)


#remove gophers and porcupines
species_15_red<-list(species_15_cr[[1]],species_15_cr[[4]],
	species_15_cr[[6]],species_15_cr[[7]],
	species_15_cr[[9]],species_15_cr[[10]],
	species_15_cr[[13]],species_15_cr[[15]])

length(species_15_red)
nrow(species_15_red[[2]])

species_15_red[[6]]
length(species_15_red)

#went back and changed extent to see if it helps with improved occurrences

for(i in 9:length(species_15_red)){
full.maxent_15 <- maxent(preds_15,cbind(species_15_red[[i]]$decimalLongitude,species_15_red[[i]]$decimalLatitude),
	removeDuplicates=TRUE, args=c("betamultiplier=1", "-J", "-P"),
				path=paste0("F:\\SPLT_community_SDM\\maxent_test\\",unique(species_15_red[[i]]$species)))
full.results<- dismo::predict(full.maxent_15, preds_15)
writeRaster(full.results, paste0("F:\\SPLT_community_SDM\\maxent_test\\",unique(species_15_red[[i]]$species),"\\",unique(species_15_red[[i]]$species),"_maxent.asc"),
                format="ascii",overwrite=TRUE)

}
length(species_15_red)
pronghorn_sdm<-raster(choose.files())
bison_sdm<-raster(choose.files())
cynomys_sdm<-raster(choose.files())
dipodomys_sdm<-raster(choose.files())
lepus_sdm<-raster(choose.files())
lynx_sdm<-raster(choose.files())
muledeer_sdm<-raster(choose.files())
sylvilagus_sdm<-raster(choose.files())
taxidea_sdm<-raster(choose.files())
vulpes_sdm<-raster(choose.files())
sdms<-stack(pronghorn_sdm,bison_sdm,cynomys_sdm,dipodomys_sdm,
	lepus_sdm,lynx_sdm,muledeer_sdm,sylvilagus_sdm,taxidea_sdm,vulpes_sdm)

names(sdms)<-c("PronghornSDM","BisonSDM","PrairieDogSDM","K-RatSDM","JackrabbitSDM","BobcatSDM",
	"MuleDeerSDM","CottontailSDM","BadgerSDM","SwiftFoxSDM")
plot(sdms)
sdm_mean<-calc(sdms,mean)
plot(sdm_mean)
plot(SE_CO_84,add=TRUE)
hartford<-vect(choose.files())
hartford_84<-project(hartford,crs(cr.elev))
plot(hartford_84,add=TRUE)
# beta.parameters<-1 # Create a vector of all the beta paremeters
beta.parameters <- c(1,2)

for(i in beta.parameters){
  print(paste("Run Maxent with", i, "as the beta parameter"))
}

all.combos <- list()
pred.num <- nlayers(predictors)
for(i in 2:pred.num){
  all.combos <- c(all.combos, combn(1:pred.num, i, simplify=FALSE))
}
all.combos

###############################
###############################

[need to update farther down]
### run the full maxent model ###

### Contemporary model ###
full.maxent <- maxent(predictors, factors=c("Soil.Texture","Land.Cover"), coordinates(Contemp_th_pts),removeDuplicates=TRUE, args=c("betamultiplier=1", "-J", "-P"),
				path="C:\\Users\\Nathan\\Desktop\\Gopher\\Presence_Only_shapefiles\\Contemp_full")
full.results <- dismo::predict(full.maxent, predictors)
plot(full.results)
writeRaster(full.results, "C:\\Users\\Nathan\\Desktop\\Gopher\\Presence_Only_shapefiles\\Contemp_full/maxent.asc",
                format="ascii")

###############################
###############################
###Plot responses ####
response(full.maxent)
density(full.maxent)

###############################
###############################
###historic MaxEnt###

rast_names<-c("Precipitation SD","Precipitation Mean","Elevation","Slope","Soil Texture","Soil Drainage","Soil Sand Percentage","Land Cover")
raster_dir_hist<-"C:\\Users\\Nathan\\Desktop\\Gopher\\historic raster stack\\"
list.files(raster_dir_hist)

predictors_hist<-raster(paste0(raster_dir_hist,list.files(raster_dir_hist)[1]))
for (i in 2:length(list.files(raster_dir_hist))){
	c<-raster(paste0(raster_dir_hist,list.files(raster_dir_hist)[i]))
	predictors_hist<-stack(predictors_hist,c)
}

### compare predictors ###

usdm::vif(predictors_hist)
pairs(predictors_hist)

###############################
###############################
full.maxent_hist <- maxent(predictors_hist, factors=c("Soil.Texture","Land.Cover"), coordinates(historic_th_pts),removeDuplicates=TRUE, args=c("betamultiplier=1", "-J", "-P"),
				path="C:\\Users\\Nathan\\Desktop\\Gopher\\Presence_Only_shapefiles\\Historic_full_randomBackground")
full.results_hist <- dismo::predict(full.maxent_hist, predictors_hist)
plot(full.results_hist)
writeRaster(full.results, "C:\\Users\\Nathan\\Desktop\\Gopher\\Presence_Only_shapefiles\\Historic_full_randomBackground/maxent.asc",
                format="ascii")

###############################
###############################
###Plot responses ####
response(full.maxent_hist)
density(full.maxent_hist)


###############################
###############################
###comparison values###


###Extract the Values###
predictors
contemp_reduced<-raster("C:\\Users\\Nathan\\Desktop\\Gopher\\Presence_Only_shapefiles\\Comparison Models\\Reduced_Contemp_landcover/red_land.asc")
predictors_contemp<-stack(predictors[[1:7]],contemp_reduced)
predictors_hist
c_pred_c_occ<-raster::extract(predictors_contemp,Contemp_th_pts)


h_pred_h_occ<-raster::extract(predictors_hist,historic_th_pts)


###merge the data into a single data frame###

c_names<-colnames(c_pred_c_occ)
comp_data_c<-cbind("Contemporary",coordinates(Contemp_th_pts),c_pred_c_occ)

colnames(h_pred_h_occ)
comp_data_h<-cbind("Historic",coordinates(historic_th_pts),h_pred_h_occ)
head(comp_data_h)

##build in the type colname. Make sure to note that the predictors are in different orders###

colnames(comp_data_c)<-c("Type","X","Y","Precipitation.SD","Precipitation.Mean","Elevation",
	"Slope","Soil.Texture","Soil.Drainage","Soil.Sand.Percentage","Land.Cover")
dim(comp_data_h)
colnames(comp_data_h)<-c("Type","X","Y","Elevation","Land.Cover","Precipitation.Mean","Precipitation.SD",
	"Slope","Soil.Drainage","Soil.Sand.Percentage","Soil.Texture")
comp_data_h
colnames(comp_data_c)
head(comp_data_h)
dim(comp_data_h)
comp_data_h_re<-cbind(comp_data_h[,1:3],comp_data_h[,7],comp_data_h[,6],comp_data_h[,4],
	comp_data_h[,8],comp_data_h[,11],comp_data_h[,9],comp_data_h[,10],comp_data_h[,5])
head(comp_data_h_re)
colnames(comp_data_h_re)<-c("Type","X","Y","Precipitation.SD","Precipitation.Mean","Elevation",
	"Slope","Soil.Texture","Soil.Drainage","Soil.Sand.Percentage","Land.Cover")
(comp_data_h_re)
comp_data<-rbind(comp_data_h_re,comp_data_c)
comp_data_df<-as.data.frame(comp_data)
class(comp_data_df)
head(comp_data_df)

comp_data_df$Type<-as.factor(comp_data_df$Type)
comp_data_df$Soil.Texture<-as.factor(comp_data_df$Soil.Texture)
comp_data_df$Land.Cover<-as.factor(comp_data_df$Land.Cover)

mode(comp_data_df$Type)
comp_data<-as.data.frame(comp_data)

head(comp_data)

require(dyplyr)
require(tidyr)

gopher_gather <- gather(comp_data_df, measure, value,"Elevation", factor_key=TRUE)

#gather all the variables. Initially just test with one
gopher_gather <- gather(comp_data_df, measure, value, "Precipitation.SD":"Land.Cover", factor_key=TRUE)
head(gopher_gather)
###plot densities ###

require(ggplot2)
ggplot(data=gopher_gather) +
  geom_density(aes(x=as.numeric(value), fill=Type), 
                 position="identity",
                 alpha=0.75) +
  facet_wrap(~measure, scales="free") +
  theme_minimal() +
  theme(legend.title=element_blank())+
  xlab("Value")+ylab("Density")
  scale_fill_manual(values=c("grey", "black")) +

ggplot(data=gopher_gather) +
  geom_histogram(aes(x=as.numeric(value), fill=Type), 
                 position="identity",
                 alpha=0.75) +

  facet_wrap(~measure, scales="free") +
  theme_minimal() +
  theme(legend.title=element_blank())
  scale_fill_manual(values=c("grey", "black")) +


colnames(comp_data)


wilcox.test(as.numeric(Soil.Sand.Percentage) ~ Type, data=comp_data) #p-value=.0004351
wilcox.test(as.numeric(Precipitation.SD) ~ Type, data=comp_data) #p-value=.011128
wilcox.test(as.numeric(Precipitation.Mean) ~ Type, data=comp_data) #p-value<2.2e-16
wilcox.test(as.numeric(Elevation) ~ Type, data=comp_data)#p-value=7.115e-14
wilcox.test(as.numeric(Slope) ~ Type, data=comp_data)#p-value=.5767
wilcox.test(as.numeric(Soil.Drainage) ~ Type, data=comp_data)#p-value=.007369

##soil texture is a factor, but wilcox has to be numeric
wilcox.test(as.numeric(Soil.Texture) ~ Type, data=comp_data)
wilcox.test(as.numeric(Land.Cover) ~ Type, data=comp_data)

#############################
#############################

Compare the background points for the variables that change

background_pts<-readOGR(dsn="C:\\Users\\Nathan\\Desktop\\Gopher\\historic imagery\\Gopher_presences",layer="background_wgs84")

c_pred_bg<-raster::extract(predictors_contemp,background_pts)
h_pred_bg<-raster::extract(predictors_hist,background_pts)

### merge together ###
###merge the data into a single data frame###

c_bg_names<-colnames(c_pred_bg)
comp_data_c_bg<-cbind("Contemporary Background",coordinates(background_pts),c_pred_bg)

colnames(h_pred_bg)
comp_data_h_bg<-cbind("Historic Background",coordinates(background_pts),h_pred_bg)
head(comp_data_h_bg)
##build in the type colname. Make sure to note that the predictors are in different orders###

colnames(comp_data_c_bg)<-c("Type","X","Y","Precipitation.SD","Precipitation.Mean","Elevation",
	"Slope","Soil.Texture","Soil.Drainage","Soil.Sand.Percentage","Land.Cover")

colnames(comp_data_h_bg)<-c("Type","X","Y","Elevation","Land.Cover","Precipitation.Mean","Precipitation.SD",
	"Slope","Soil.Drainage","Soil.Sand.Percentage","Soil.Texture")

colnames(comp_data_c_bg)
colnames(comp_data_h_bg)

comp_data_h_bg_re<-cbind(comp_data_h_bg[,1:3],comp_data_h_bg[,7],comp_data_h_bg[,6],comp_data_h_bg[,4],
	comp_data_h_bg[,8],comp_data_h_bg[,11],comp_data_h_bg[,9],comp_data_h_bg[,10],comp_data_h_bg[,5])

colnames(comp_data_h_bg_re)<-c("Type","X","Y","Precipitation.SD","Precipitation.Mean","Elevation",
	"Slope","Soil.Texture","Soil.Drainage","Soil.Sand.Percentage","Land.Cover")

head(comp_data_h_bg)

comp_data_bg<-rbind(comp_data_c_bg,comp_data_h_bg_re)
comp_data_bg_df<-as.data.frame(comp_data_bg)
class(comp_data_bg_df)
head(comp_data_bg_df)

gopher_gather_bg <- gather(comp_data_bg_df, measure, value, c("Precipitation.SD":"Precipitation.Mean","Land.Cover"), factor_key=TRUE)


ggplot(data=gopher_gather_bg) +
  geom_density(aes(x=as.numeric(value), fill=Type), 
                 position="identity",
                 alpha=0.75) +
  facet_wrap(~measure, scales="free") +
  theme_minimal() +
  theme(legend.title=element_blank())+
  xlab("Value")+ylab("Density")
  scale_fill_manual(values=c("grey", "black")) +

wilcox.test(as.numeric(Land.Cover) ~ Type, data=comp_data_bg_df)
wilcox.test(as.numeric(Precipitation.SD) ~ Type, data=comp_data_bg_df)
wilcox.test(as.numeric(Precipitation.Mean) ~ Type, data=comp_data_bg_df)

########################################
########################################
### landscape shift at gopher locations###
c_land_h_occ<-raster::extract(contemp_reduced,historic_th_pts)
h_land_h_occ<-raster::extract(predictors_hist[[2]],historic_th_pts)

comp_land<-cbind("Contemporary Landcover",c_land_h_occ)
hist_land<-cbind("Historic Landcover",h_land_h_occ)

gopher_land<-rbind(comp_land,hist_land)
colnames(gopher_land)<-c("Time","Land.Cover")

gopher_land_gather <- gather(data.frame(gopher_land), measure, value, "Land.Cover", factor_key=TRUE)


ggplot(data=gopher_land_gather) +
  geom_density(aes(x=as.numeric(value), fill=Time), 
                 position="identity",
                 alpha=0.75) +
  facet_wrap(~measure, scales="free") +
  theme_minimal() +
  theme(legend.title=element_blank())+
  xlab("Value")+ylab("Density")

wilcox.test(as.numeric(Land.Cover) ~ Time, data=gopher_land)
